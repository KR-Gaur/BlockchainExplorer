	/*
		This file is just to deploy a contract
		
		tx.sign() uses privatekey1 => user one signs the transaction and deploys the contract.
		
		Need Bytcode of contract 
		Pass it as data in the transaction Object
		
		After transaction is successful ,get contract Address 
			  get contract ABI either by compiling the contract with Online Remix IDE or with commandline solc.
			  
		Follow next file isContractdeployed.js
			
	*/
	
	
	
	
	var Tx = require('ethereumjs-tx')

	const Web3 = require('web3')
	const web3 = new Web3('http://127.0.0.1:7545')

	const account1 = '0x996E4c63dDb88CC6e8d7a2442303c38A57BFF6Ce'
	const account2 = '0xDaE003fF4C494f61F8d1952e5757C7cd0185faE8'

																//console.log(web3.eth.accounts.create())								
																			/*if you do not have account use this to create one*/


	const privateKey1 = Buffer.from(process.env.PRIVATE_KEY_1, 'hex')       //Buffer helps to convert string to binary data

																//console.log(process.env.PRIVATE_KEY_1);
																

	const privateKey2 = Buffer.from(process.env.PRIVATE_KEY_2, 'hex')		//exported PRIVATE_KEY_1 in terminal and now retrieving here



																			//get the transaction count from account 1 as it is the sender
	web3.eth.getTransactionCount(account1, (err , txCount) => {
	
																			//byte code of contract
	const consData = '0x608060405234801561001057600080fd5b5061056b806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631da0b8fc146100675780634ed3885e146101235780636d4ce63c1461018c57806371c935831461021c575b600080fd5b34801561007357600080fd5b506100a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102a5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100e85780820151818401526020810190506100cd565b50505050905090810190601f1680156101155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561012f57600080fd5b5061018a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610386565b005b34801561019857600080fd5b506101a16103a0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e15780820151818401526020810190506101c6565b50505050905090810190601f16801561020e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022857600080fd5b506102a3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610442565b005b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561037a5780601f1061034f5761010080835404028352916020019161037a565b820191906000526020600020905b81548152906001019060200180831161035d57829003601f168201915b50505050509050919050565b806000908051906020019061039c92919061049a565b5050565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104385780601f1061040d57610100808354040283529160200191610438565b820191906000526020600020905b81548152906001019060200180831161041b57829003601f168201915b5050505050905090565b81600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908051906020019061049592919061049a565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104db57805160ff1916838001178555610509565b82800160010185558215610509579182015b828111156105085782518255916020019190600101906104ed565b5b509050610516919061051a565b5090565b61053c91905b80821115610538576000816000905550600101610520565b5090565b905600a165627a7a7230582000738794df9daba8d7e5a14cccb0ebce2fa8d2bfb7933f40d6d0b7cac7a71b3a0029'
    
    	const txObject = 
    {
        nonce : web3.utils.toHex(txCount),          					//all paramters should be in Hex
        gasLimit : web3.utils.toHex(1000000),
        gasPrice : web3.utils.toHex(web3.utils.toWei('10','gwei')),
        data : consData
    }

    		//Sign a transaction
    
    const tx = new Tx(txObject)
    tx.sign(privateKey1)

    
    const serializedTransaction = tx.serialize()
    const raw = '0x' + serializedTransaction.toString('hex')

    		//Broadcast a transaction
    
    web3.eth.sendSignedTransaction(raw , (err , txHash) => {
        console.log('txHash : ' , txHash)
    })
})


